const generateBtn = document.getElementById('generate');
const output = document.getElementById('output');

// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MASK_COLOR_R, MASK_COLOR_G, MASK_COLOR_B, MASK_COLOR_A
// –∏ maskCanvas, maskCtx, image, canvas, ctx –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–∫–æ—É–ø–µ.
// –ù–∞–ø—Ä–∏–º–µ—Ä:
// const MASK_COLOR_R = 0; // –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–∞—à –º–∞—Ä–∫–µ—Ä - —á–∏—Å—Ç–æ –∑–µ–ª–µ–Ω—ã–π (0, 255, 0, 255)
// const MASK_COLOR_G = 255;
// const MASK_COLOR_B = 0;
// const MASK_COLOR_A = 255;
// let maskCanvas = document.getElementById('maskCanvas'); // –í–∞—à –∫–∞–Ω–≤–∞—Å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–∞—Å–∫–∏
// let maskCtx = maskCanvas.getContext('2d');
// let image = new Image(); // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
// let canvas = document.getElementById('mainCanvas'); // –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–≤–∞—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
// let ctx = canvas.getContext('2d');


generateBtn.addEventListener('click', () => {
    console.log('üîÑ Starting glitch generation...');

    if (!image) {
        console.error('‚ùå Image not loaded!');
        return alert('Please upload an image first');
    }
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–æ–≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
    if (canvas.width !== maskCanvas.width || canvas.height !== maskCanvas.height) {
        console.warn('‚ö†Ô∏è Main canvas and mask canvas have different dimensions. This might cause issues.');
        // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å maskCanvas.width/height = canvas.width/height
        // –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π –∫–∞–Ω–≤–∞—Å —è–≤–ª—è–µ—Ç—Å—è "–º–∞—Å—Ç–µ—Ä—Å–∫–∏–º" –ø–æ —Ä–∞–∑–º–µ—Ä—É.
    }

    console.log('‚úÖ Image loaded, dimensions:', canvas.width, 'x', canvas.height);

    const frameCount = 10;
    console.log(`üéû Starting generation of ${frameCount} glitched images...`);

    // Clear previous output
    output.innerHTML = '';

    // Create container for images
    const imagesContainer = document.createElement('div');
    imagesContainer.style.display = 'flex';
    imagesContainer.style.flexWrap = 'wrap';
    imagesContainer.style.gap = '10px';
    imagesContainer.style.marginTop = '20px';
    output.appendChild(imagesContainer);

    // Array to store frames for GIF
    const gifFrames = [];

    // --- –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –∏–∑ maskCanvas ---
    // –≠—Ç–æ imageData —Å —Ç–µ–º, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const maskImageData = maskCtx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);
    const maskData = maskImageData.data;
    console.log('üìä Mask pixel data received from mask canvas.');

    // --- –ù–∞—Ö–æ–¥–∏–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–∏–∫—Å–µ–ª–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ ---
    const markedPixels = new Set();
    const radius = 10; // –†–∞–¥–∏—É—Å –≤–æ–∫—Ä—É–≥ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏

    for (let y = 0; y < maskCanvas.height; y++) {
        for (let x = 0; x < maskCanvas.width; x++) {
            const index = (y * maskCanvas.width + x) * 4;
            const r = maskData[index];
            const g = maskData[index + 1];
            const b = maskData[index + 2];
            const a = maskData[index + 3];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞
            // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MASK_COLOR_R, G, B, A —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ü–≤–µ—Ç—É –≤–∞—à–µ–π –∫–∏—Å—Ç–∏ –¥–ª—è –º–∞—Å–∫–∏.
            if (r === MASK_COLOR_R && g === MASK_COLOR_G && b === MASK_COLOR_B && a === MASK_COLOR_A) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∏–∫—Å–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–¥–∏—É—Å–∞ –∫ –Ω–∞–±–æ—Ä—É markedPixels
                for (let dy = -radius; dy <= radius; dy++) {
                    for (let dx = -radius; dx <= radius; dx++) {
                        const nx = x + dx;
                        const ny = y + dy;
                        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ nx –∏ ny –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –û–ë–©–ò–• —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–∫–∞–Ω–≤–∞—Å–∞
                        if (nx >= 0 && nx < canvas.width && ny >= 0 && ny < canvas.height) {
                            markedPixels.add(ny * canvas.width + nx); // –°–æ—Ö—Ä–∞–Ω—è–µ–º 1D-–∏–Ω–¥–µ–∫—Å –ø–∏–∫—Å–µ–ª—è
                        }
                    }
                }
            }
        }
    }
    console.log(`üîç Found ${markedPixels.size} pixels in marked areas (including radius).`);

    // --- –¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–æ–≤ –≥–ª–∏—Ç—á–∞ ---
    for (let i = 0; i < frameCount; i++) {
        console.log(`\nüì∏ Generating image ${i + 1}/${frameCount}`);

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–≤–∞—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        const tempCtx = tempCanvas.getContext('2d');

        // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–≤–∞—Å (—ç—Ç–æ –±–∞–∑–∞ –¥–ª—è –≥–ª–∏—Ç—á–∞)
        tempCtx.drawImage(image, 0, 0);

        // –ü–æ–ª—É—á–∞–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞
        const originalImageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);
        const originalData = originalImageData.data; // –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∏—Ç—á-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∫–æ–ø–∏–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏.
        const glitchedData = new Uint8ClampedArray(originalData);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –ª–∏–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–¥—Ä–∞
        const lineShifts = [];
        const maxShift = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        const minLineHeight = 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–∏–Ω–∏–∏
        const maxLineHeight = 20; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–∏–Ω–∏–∏

        let currentLineY = 0;
        while (currentLineY < canvas.height) {
            const lineHeight = Math.floor(Math.random() * (maxLineHeight - minLineHeight + 1)) + minLineHeight;
            const shift = Math.floor(Math.random() * maxShift * 2) - maxShift; // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (-maxShift –¥–æ +maxShift)
            lineShifts.push({ height: lineHeight, shift: shift });
            currentLineY += lineHeight;
        }

        // --- –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ª–∏–Ω–∏–π ---
        let processedHeight = 0;
        for (const line of lineShifts) {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π "–ª–∏–Ω–∏–∏" –ø–∏–∫—Å–µ–ª–µ–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
            const lineBuffer = new Uint8ClampedArray(line.height * canvas.width * 4);
            let bufferOffset = 0;

            for (let yOffset = 0; yOffset < line.height; yOffset++) {
                const sourceY = processedHeight + yOffset;
                if (sourceY >= canvas.height) break;

                for (let x = 0; x < canvas.width; x++) {
                    const originalPixelDataIndex = (sourceY * canvas.width + x) * 4;
                    // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏–∫—Å–µ–ª—å –≤ –±—É—Ñ–µ—Ä –ª–∏–Ω–∏–∏
                    lineBuffer[bufferOffset++] = originalData[originalPixelDataIndex];
                    lineBuffer[bufferOffset++] = originalData[originalPixelDataIndex + 1];
                    lineBuffer[bufferOffset++] = originalData[originalPixelDataIndex + 2];
                    lineBuffer[bufferOffset++] = originalData[originalPixelDataIndex + 3];
                }
            }

            // –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ, —á–∏—Ç–∞—è –∏–∑ lineBuffer –∏ –∑–∞–ø–∏—Å—ã–≤–∞—è –≤ glitchedData
            bufferOffset = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ lineBuffer
            for (let yOffset = 0; yOffset < line.height; yOffset++) {
                const sourceY = processedHeight + yOffset;
                if (sourceY >= canvas.height) break;

                for (let x = 0; x < canvas.width; x++) {
                    const pixelIndex = sourceY * canvas.width + x; // 1D-–∏–Ω–¥–µ–∫—Å –ø–∏–∫—Å–µ–ª—è

                    // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–∏–ª–∏ –µ–µ —Ä–∞–¥–∏—É—Å–µ)
                    if (markedPixels.has(pixelIndex)) {
                        const targetX = x + line.shift; // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É

                        if (targetX >= 0 && targetX < canvas.width) {
                            const targetDataIndex = (sourceY * canvas.width + targetX) * 4; // –ò–Ω–¥–µ–∫—Å –≤ glitchedData

                            // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –ª–∏–Ω–∏–∏ –≤ glitchedData –ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
                            glitchedData[targetDataIndex] = lineBuffer[bufferOffset];
                            glitchedData[targetDataIndex + 1] = lineBuffer[bufferOffset + 1];
                            glitchedData[targetDataIndex + 2] = lineBuffer[bufferOffset + 2];
                            glitchedData[targetDataIndex + 3] = lineBuffer[bufferOffset + 3];
                        }
                    }
                    bufferOffset += 4; // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–∫—Å–µ–ª—è
                }
            }
            processedHeight += line.height;
        }

        // –ü–æ–º–µ—â–∞–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∏—Ç—á-–¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–≤–∞—Å
        const finalResult = new ImageData(glitchedData, canvas.width, canvas.height);
        tempCtx.putImageData(finalResult, 0, 0);
        console.log(`‚úÖ Applied glitch effect for frame ${i + 1}.`);

        // Add frame to gifFrames array
        gifFrames.push(tempCanvas);

        // --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
        const imgContainer = document.createElement('div');
        imgContainer.style.textAlign = 'center';

        const img = document.createElement('img');
        img.src = tempCanvas.toDataURL('image/png');
        img.style.maxWidth = '300px';
        img.style.height = 'auto';

        const downloadLink = document.createElement('a');
        downloadLink.href = tempCanvas.toDataURL('image/png');
        downloadLink.download = `glitched_${i + 1}.png`;
        downloadLink.innerText = `üì• Download Image ${i + 1}`;
        downloadLink.style.display = 'block';
        downloadLink.style.marginTop = '5px';
        downloadLink.style.color = '#0ff';

        imgContainer.appendChild(img);
        imgContainer.appendChild(downloadLink);
        imagesContainer.appendChild(imgContainer);

        console.log('‚úÖ Image displayed and download link added');
    }

    console.log('‚ú® All glitch generations completed!');

    // Check if GIF.js is loaded
    if (typeof GIF === 'undefined') {
        console.error('‚ùå GIF.js library is not loaded!');
        return;
    }

    // Create GIF
    const gif = new GIF({
        workers: 2,
        quality: 10,
        delay: 100,
        repeat: 0,
        width: canvas.width,
        height: canvas.height,
        workerScript: '/public/js/gif.worker.js'
    });

    // Add frames to GIF
    gifFrames.forEach(frameCanvas => {
        gif.addFrame(frameCanvas, { delay: 100 });
    });

    // Handle GIF completion
    gif.on('finished', function (blob) {
        console.log('üéâ GIF generation finished!');
        const gifUrl = URL.createObjectURL(blob);

        const gifContainer = document.createElement('div');
        gifContainer.style.textAlign = 'center';
        gifContainer.style.marginTop = '30px';
        gifContainer.style.borderTop = '1px solid #333';
        gifContainer.style.paddingTop = '20px';
        output.appendChild(gifContainer);

        const gifTitle = document.createElement('h3');
        gifTitle.innerText = 'Generated GIF Animation';
        gifTitle.style.color = '#fff';
        gifContainer.appendChild(gifTitle);

        const gifImg = document.createElement('img');
        gifImg.src = gifUrl;
        gifImg.style.maxWidth = '500px';
        gifImg.style.height = 'auto';
        gifImg.alt = 'Glitched GIF Animation';
        gifContainer.appendChild(gifImg);

        const downloadGifLink = document.createElement('a');
        downloadGifLink.href = gifUrl;
        downloadGifLink.download = 'glitched_animation.gif';
        downloadGifLink.innerText = 'üì• Download Glitched GIF';
        downloadGifLink.style.display = 'block';
        downloadGifLink.style.marginTop = '10px';
        downloadGifLink.style.color = '#0f0';

        gifContainer.appendChild(downloadGifLink);

        gifImg.onload = () => URL.revokeObjectURL(gifUrl);
    });

    // Handle GIF progress
    gif.on('progress', function (p) {
        console.log(`üìä GIF encoding progress: ${Math.round(p * 100)}%`);
    });

    // Start GIF rendering
    gif.render();
    console.log('üöÄ GIF rendering initiated...');
});